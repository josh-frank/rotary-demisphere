<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg id='root' width='100%' height='100%' viewBox='-400 -400 800 800' preserveAspectRatio='xMidYMid slice' zoomAndPan='disable' contentScriptType='text/ecmascript' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink="http://www.w3.org/1999/xlink">

<title>Rotary Demisphere - Digital Duchamp</title>
<desc>Interactive Rotary Demisphere inspired by Marcel Duchamp's "Rotary Demisphere (Precision Optics)" (1925)</desc>
<!-- Additional thanks to Chris W. Johnson: chriswjohnson.blogspot.com -->

<defs>
<style type='text/css'>/* <![CDATA[ */

svg {
  fill: white;
  background: white;
}

g#demisphere circle {
  stroke: black;
  stroke-width: 1px;
  fill: none;
}

/* ]]> */</style>
</defs>

<g id='demisphere'></g>

<script type='text/ecmascript'>/* <![CDATA[ */

function RotaryDemisphere(numberOfCircles, startingRadius, radiusIncrement, offsetDistance, angleIncrement) {
  this.init(numberOfCircles, startingRadius, radiusIncrement, offsetDistance, angleIncrement);
}

RotaryDemisphere.prototype = {

  init: function(numberOfCircles, startingRadius, radiusIncrement, offsetDistance, angleIncrement) {
    this.numberOfCircles = numberOfCircles;
    this.startingRadius = startingRadius;
    this.radiusIncrement = radiusIncrement;
    this.offsetDistance = offsetDistance;
    this.angleIncrement = angleIncrement;
    
    this.circles = [];
    this.generateCircles();
  },

  generateCircles: function() {
    for (var i = 0; i < this.numberOfCircles; i++) {
      var angle = i * this.angleIncrement;
      var cx = this.offsetDistance * Math.cos(angle);
      var cy = this.offsetDistance * Math.sin(angle);
      var r = this.startingRadius + (i * this.radiusIncrement);
      
      this.circles.push({
        cx: cx,
        cy: cy,
        r: r
      });
    }
  },

  render: function() {
    var g = document.getElementById('demisphere');
    
    // Clear existing circles
    while (g.firstChild) {
      g.removeChild(g.firstChild);
    }
    
    // Add new circles
    for (var i = 0; i < this.circles.length; i++) {
      var circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
      circle.setAttribute('cx', this.circles[i].cx);
      circle.setAttribute('cy', this.circles[i].cy);
      circle.setAttribute('r', this.circles[i].r);
      g.appendChild(circle);
    }
  }
};

function DemisphereRotator( TimeIncrementMilliseconds = 16 ) {
  var RotationIncrementDegrees = 2;
  var RotationPerMillisecond = RotationIncrementDegrees / TimeIncrementMilliseconds;
  var Canvas = document.getElementById("root");
  var Demisphere = document.getElementById("demisphere");
  var Angle = 0;
  var Rotating = true; // Start automatically
  var StartCount = 0;
  var BaseMs;
  var IntervalID;

  Canvas.addEventListener("click", toggle, false);

  this.toggle = toggle;
  this.start = start;
  this.stop = stop;
  this.rotate = rotate;

  function toggle() {
    if (Rotating)
      stop();
    else
      start();
  }

  function start() {
    StartCount++;
    BaseMs = Date.now();
    Rotating = true;
    IntervalID = window.setInterval(function() { TheRotator.rotate(); }, TimeIncrementMilliseconds);
  }

  function stop() {
    window.clearInterval(IntervalID);
    Rotating = false;
  }

  function rotate() {
    if (!Rotating)
      return;

    var NowMs = Date.now();
    var Rotation = (NowMs - BaseMs) * RotationPerMillisecond;

    BaseMs = NowMs;

    if (StartCount % 2 != 0)
      Angle = (Angle - Rotation) % 360;
    else
      Angle = (Angle + Rotation) % 360;

    Demisphere.setAttribute("transform", "rotate(" + Angle + ")");
  }
}

// Parse URL parameters for spiral configuration
function parseURLParams() {
  var params = new URLSearchParams(window.location.search);
  var goldenRatio = (1 + Math.sqrt(5)) / 2;
  
  // Preset configurations
  // var presets = {
  //   'divine': { numberOfCircles: 11, startingRadius: 16, radiusIncrement: 16 * goldenRatio, offsetDistance: 13, angleIncrement: (Math.PI * 2) / goldenRatio },
  //   'duchamp': { numberOfCircles: 12, startingRadius: 25, radiusIncrement: 20, offsetDistance: 7.5, angleIncrement: Math.PI / 3 },
  //   'golden': { numberOfCircles: 10, startingRadius: 20, radiusIncrement: 20 * goldenRatio, offsetDistance: 15, angleIncrement: Math.PI / 5 },
  //   'hypnotic': { numberOfCircles: 20, startingRadius: 15, radiusIncrement: 8, offsetDistance: 12, angleIncrement: Math.PI / 12 },
  //   'square': { numberOfCircles: 8, startingRadius: 30, radiusIncrement: 25, offsetDistance: 20, angleIncrement: Math.PI / 2 },
  //   'fibonacci': { numberOfCircles: 13, startingRadius: 13, radiusIncrement: 21, offsetDistance: 8, angleIncrement: Math.PI / 8 },
  //   'pentagon': { numberOfCircles: 15, startingRadius: 18, radiusIncrement: 12, offsetDistance: 10, angleIncrement: (2 * Math.PI) / 5 },
  //   'nautilus': { numberOfCircles: 8, startingRadius: 12, radiusIncrement: 35, offsetDistance: 25, angleIncrement: Math.PI / 4 },
  //   'dna': { numberOfCircles: 30, startingRadius: 8, radiusIncrement: 3, offsetDistance: 6, angleIncrement: Math.PI / 24 },
  //   'zen': { numberOfCircles: 10, startingRadius: 20, radiusIncrement: 15, offsetDistance: 0, angleIncrement: 0 }
  // };
  
  // Check for preset first
  // var preset = params.get('preset');
  // if (preset && presets[preset]) {
  //   return presets[preset];
  // }
  
  // Otherwise use individual parameters (with Divine Proportion defaults)
  return {
    numberOfCircles: parseInt(params.get('circles')) || 11,
    startingRadius: parseFloat(params.get('radius')) || 16,
    radiusIncrement: parseFloat(params.get('increment')) || 16 * goldenRatio,
    offsetDistance: parseFloat(params.get('offset')) || 13,
    angleIncrement: parseFloat(params.get('angle')) || (Math.PI * 2) / goldenRatio,
    speed: parseFloat(params.get('speed')) || 16
  };
}

// Initialize with URL parameters or defaults
var spiralConfig = parseURLParams();
var TheDemisphere = new RotaryDemisphere(
  spiralConfig.numberOfCircles,
  spiralConfig.startingRadius,
  spiralConfig.radiusIncrement,
  spiralConfig.offsetDistance,
  spiralConfig.angleIncrement
);

var TheRotator = new DemisphereRotator(spiralConfig.speed);

// Render the demisphere
TheDemisphere.render();

// Start rotating
TheRotator.start();

/* ]]> */</script>

</svg>